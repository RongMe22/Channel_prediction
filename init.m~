function [parameter] = init(csi, parameter)

global N L M FREQUENCY DOMAIN_TAU


%% init tau
X = eStep(parameter, csi);

tau_space = repmat(X, 1, DOMAIN_TAU.length);

var = reshape(repmat(DOMAIN_TAU.start:DOMAIN_TAU.step:DOMAIN_TAU.end, ...
    L*M, 1), [M, DOMAIN_TAU.length*L]);

tau_space = abs(tau_space .* exp(-1j*2*pi*FREQUENCY*var));

opt_tau = transpose(reshape(sum(tau_space, 1), [L, DOMAIN_TAU.size]));

[~, I] = max(opt_tau);

parameter.tau = DOMAIN_TAU.step*(I-1)+DOMAIN_TAU.start;

%% init phi
DOMAIN_PHI.start = 0; end_phi = pi; step_phi = pi/10;  
n_phi = (end_phi - DOMAIN_PHI.start) / step_phi + 1;

phi_space = zeros(n_phi, L);
for i = 1:n_phi
    phi_space(i,:) = compute_Z(parameter.tau,... 
        zeros(1, L)+step_phi*(i-1)+DOMAIN_PHI.start, X);
end
[~, I] = max(abs(phi_space));
parameter.phi = step_phi*(I-1)+DOMAIN_PHI.start;


%% init alpha
parameter.alpha = 1/(M*N)*abs(compute_Z(parameter.tau, parameter.phi, X));
        
end